package org.jenkinsci.plugins.azurekeyvaultplugin;

import com.cloudbees.plugins.credentials.Credentials;
import com.cloudbees.plugins.credentials.CredentialsMatchers;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.CredentialsScope;
import com.cloudbees.plugins.credentials.SystemCredentialsProvider;
import com.cloudbees.plugins.credentials.common.IdCredentials;
import com.cloudbees.plugins.credentials.common.StandardListBoxModel;
import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.microsoft.azure.util.AzureBaseCredentials;
import com.microsoft.azure.util.AzureCredentials;
import com.microsoft.azure.util.AzureImdsCredentials;
import hudson.Extension;
import hudson.ExtensionList;
import hudson.model.Item;
import hudson.security.ACL;
import hudson.util.ListBoxModel;
import java.io.IOException;
import java.util.Optional;
import jenkins.model.GlobalConfiguration;
import jenkins.model.Jenkins;
import org.apache.commons.lang3.StringUtils;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundSetter;

@Extension
@Symbol("azureKeyVault")
public class AzureKeyVaultGlobalConfiguration extends GlobalConfiguration {

    public static final String GENERATED_ID = "azure-keyvault-autogenerated";
    private static final String GENERATED_DESCRIPTION = "Auto generated credential from environment";
    private String keyVaultURL;
    private String credentialID;

    public AzureKeyVaultGlobalConfiguration() {
        load();
    }

    public String getKeyVaultURL() {
        if (StringUtils.isEmpty(this.keyVaultURL)) {
            resolveKeyVaultUrlFromEnvironment()
                    .ifPresent(url -> {
                        this.keyVaultURL = url;
                        save();
                    });
        }

        return keyVaultURL;
    }

    @DataBoundSetter
    public void setKeyVaultURL(String keyVaultURL) {
        this.keyVaultURL = keyVaultURL;
        save();
        refresh();
    }

    private void refresh() {
        AzureCredentialsProvider azureCredentialsProvider = ExtensionList.lookupSingleton(AzureCredentialsProvider.class);
        azureCredentialsProvider.refreshCredentials();
    }

    public String getCredentialID() {
        if (StringUtils.isEmpty(this.credentialID)) {
            resolveCredentialIdFromEnvironment()
                    .ifPresent(id -> {
                        this.credentialID = id;
                        save();
                    });
        }

        return this.credentialID;
    }

    private Optional<String> resolveKeyVaultUrlFromEnvironment() {
        return getPropertyByEnvOrSystemProperty("AZURE_KEYVAULT_URL", "jenkins.azure-keyvault.url");
    }

    private Optional<String> resolveCredentialIdFromEnvironment() {
        // directly lookup the credential so that we don't get a stackoverflow due to credential provider
        Optional<String> optionalCredentials = SystemCredentialsProvider.getInstance()
                .getCredentials()
                .stream()
                .filter(credentials -> (credentials instanceof AzureCredentials || credentials instanceof AzureImdsCredentials)  && ((IdCredentials) credentials).getId().equals(GENERATED_ID))
                .map(credentials -> ((IdCredentials) credentials).getId())
                .findAny();

        if (optionalCredentials.isPresent()) {
            return optionalCredentials;
        }

        String uami = getPropertyByEnvOrSystemProperty("AZURE_KEYVAULT_UAMI_ENABLED", "jenkins.azure-keyvault.uami.enabled")
                .orElse("false");

        IdCredentials credentials;
        if (uami.equals("true")) {
             credentials = new AzureImdsCredentials(
                    CredentialsScope.GLOBAL, GENERATED_ID, GENERATED_DESCRIPTION
            );
            storeCredential(credentials);
            return Optional.of(credentials.getId());
        }

        String clientId = getPropertyByEnvOrSystemProperty("AZURE_KEYVAULT_SP_CLIENT_ID", "jenkins.azure-keyvault.sp.client_id")
                .orElse("false");
        if (clientId.equals("false")) {
            return Optional.empty();
        }

        String clientSecret = getPropertyByEnvOrSystemProperty("AZURE_KEYVAULT_SP_CLIENT_SECRET", "jenkins.azure-keyvault.sp.client_secret")
                .orElseThrow(IllegalArgumentException::new);
        String subscriptionId = getPropertyByEnvOrSystemProperty("AZURE_KEYVAULT_SP_SUBSCRIPTION_ID", "jenkins.azure-keyvault.sp.subscription_id")
                .orElseThrow(IllegalArgumentException::new);
        String tenantId = getPropertyByEnvOrSystemProperty("AZURE_KEYVAULT_SP_TENANT_ID", "jenkins.azure-keyvault.sp.tenant_id")
                .orElseThrow(IllegalArgumentException::new);

        AzureCredentials azureCredentials = new AzureCredentials(CredentialsScope.GLOBAL, GENERATED_ID, GENERATED_DESCRIPTION, subscriptionId, clientId, clientSecret);
        azureCredentials.setTenant(tenantId);

        storeCredential(azureCredentials);
        return Optional.of(azureCredentials.getId());
    }

    private Optional<String> getPropertyByEnvOrSystemProperty(String envVariable, String systemProperty) {
        String envResult = System.getenv(envVariable);
        if (envResult != null) {
            return Optional.of(envResult);
        }

        String systemResult = System.getProperty(systemProperty);
        if (systemResult != null) {
            return Optional.of(systemResult);
        }

        return Optional.empty();
    }

    private void storeCredential(IdCredentials credentials) {
        SystemCredentialsProvider instance = SystemCredentialsProvider.getInstance();
        instance.getCredentials().add(credentials);

        try {
            instance.save();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private String getEnvWithDefault(String property, String defaultValue) {
        String result = System.getenv(property);

        if (result == null) {
            return defaultValue;
        }
        return property;
    }

    @DataBoundSetter
    public void setCredentialID(String credentialID) {
        this.credentialID = credentialID;
        save();
        refresh();
    }

    @SuppressWarnings("unused")
    public ListBoxModel doFillCredentialIDItems(@AncestorInPath Item context) {
        if(context == null && !Jenkins.get().hasPermission(Jenkins.ADMINISTER) ||
                context != null && !context.hasPermission(Item.EXTENDED_READ)) {
            return new StandardListBoxModel();
        }

        return new StandardListBoxModel()
                .includeEmptyValue()
                .includeAs(ACL.SYSTEM, context, StandardUsernamePasswordCredentials.class)
                .includeAs(ACL.SYSTEM, context, AzureCredentials.class)
                .includeAs(ACL.SYSTEM, context, AzureImdsCredentials.class);
    }

    public static AzureKeyVaultGlobalConfiguration get() {
        return ExtensionList.lookupSingleton(AzureKeyVaultGlobalConfiguration.class);
    }
}
